[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=48",
  "setuptools_scm[toml]>=6.3.1",
]

[project]
name = "pytest-test-utils"
readme = "README.md"
license = { text = "Apache License 2.0" }
authors = [{ name = "Saugat Pachhai", email = "support@dvc.org" }]
requires-python = ">=3.7"
classifiers = [
  "Framework :: Pytest",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
dynamic = [
  "version",
]
dependencies = [
  "pytest>=3.9",
]
[project.optional-dependencies]
dev = [
  "mypy",
  "pytest-test-utils[tests]",
]
tests = [
  "coverage>=6",
]
[project.urls]
Issues = "https://github.com/iterative/pytest-test-utils/issues"
Source = "https://github.com/iterative/pytest-test-utils"
[project.entry-points.pytest11]
pytest_test_utils = "pytest_test_utils.pytest_plugin"

[tool.setuptools.package-data]
pytest_test_utils = ["py.typed"]

[tool.setuptools_scm]

[tool.ruff]
output-format = "full"
show-fixes = true

[tool.ruff.lint]
ignore = ["S101"]
extend-select = ["S", "I", "B", "C4", "T10"]

[tool.codespell]
ignore-words-list = "cachable"

[tool.pytest.ini_options]
testpaths = ["tests.py"]

[tool.coverage.run]
branch = true
source = ["pytest_test_utils"]

[tool.coverage.paths]
source = ["dvc"]

[tool.coverage.report]
exclude_lines = [
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@overload",
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
]
show_missing = true

[tool.mypy]
# Error output
show_column_numbers = true
show_error_codes = true
show_error_context = true
show_traceback = true
pretty = true
check_untyped_defs = true
strict = true
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
files = ["pytest_test_utils", "tests.py"]

[[tool.mypy.overrides]]
module = ["tests"]
strict_equality = false
